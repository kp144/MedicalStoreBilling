/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphModule.java
 *
 * Created on Nov 21, 2009, 3:41:21 PM
 */

package GUI;

import Business.ReportDetailsManage;
import Business.CustomerManage;
import Business.OrderManage;
import Data.msbsCustomer;
import Data.msbsOrders;
import Data.msbsReportDetails;
import java.awt.BorderLayout;
import java.awt.Container;
import java.text.DecimalFormat;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author V-sign
 */
public class GraphModule extends javax.swing.JDialog {

    /** Creates new form GraphModule */
    public GraphModule(java.awt.Frame parent, boolean modal,String code,String Gtaitle,String Gmonth,String Gyear) {
        super(parent, modal);
        Rcode=code;
        year = Gyear;
        taitle = Gtaitle;
        initComponents();
        OrdMn = new OrderManage();
        reportDetailsMn = new ReportDetailsManage();
        this.setTitle(taitle);

        if (Gmonth.equals("January")) {
            month = "1";
        } else if (Gmonth.equals("February")) {
            month = "2";
        } else if (Gmonth.equals("March")) {
            month = "3";
        } else if (Gmonth.equals("April")) {
            month = "4";
        } else if (Gmonth.equals("May")) {
            month = "5";
        } else if (Gmonth.equals("June")) {
            month = "6";
        } else if (Gmonth.equals("July")) {
            month = "7";
        } else if (Gmonth.equals("August")) {
            month = "8";
        } else if (Gmonth.equals("September")) {
            month = "9";
        } else if (Gmonth.equals("October")) {
            month = "10";
        } else if (Gmonth.equals("November")) {
            month = "11";
        } else if (Gmonth.equals("December")) {
            month = "12";
        }
        series = new XYSeries("Income");
        getAllOrder();
        final XYSeriesCollection data = new XYSeriesCollection(series);
        final JFreeChart chart = ChartFactory.createXYLineChart(
            taitle,
            "Day",
            "Money ($)",
            data,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );

        final ChartPanel chartPanel = new ChartPanel(chart);
        this.setContentPane(chartPanel);
    }

    public void getAllOrder(){
        Hashtable<String,String> result = new Hashtable<String,String >();
        int day;
        Double total=0.0;
        String fullDate ="";
        String[] DateArray=null;
        DecimalFormat df = new DecimalFormat(".#");
        Vector<msbsReportDetails> reportDetails = new Vector<msbsReportDetails>();
        reportDetails = reportDetailsMn.getReportDetailsByCode(Rcode);
        
        for (int i = 0; i < reportDetails.size(); i++) {
            msbsReportDetails ReportD = new msbsReportDetails();
            ReportD = (msbsReportDetails) reportDetails.get(i);
            Orders = OrdMn.getOrdersByOrderCode(ReportD.getOrderCode());
            //get day from full date of Order
            fullDate=String.valueOf(Orders.getExpiredTime());
            DateArray=fullDate.split("-");
            day=Integer.valueOf(DateArray[2]);
            //add day and day's money
            if(result.containsKey(String.valueOf(day))){
                // if day existed, PaidMoney will be added
                total = Double.valueOf(String.valueOf(df.format(Orders.getPaidMoney()))) + Double.valueOf(result.get(String.valueOf(day)));
                result.put(String.valueOf(day), String.valueOf(total));
            }else{
                //add new day
                result.put(String.valueOf(day),String.valueOf(df.format(Orders.getPaidMoney())));
            }
        }
        //check from day 1 to day 31
        for(int z=1;z<=31;z++){
            if(result.containsKey(String.valueOf(z))){
                // if day has income money
                series.add(z,Double.valueOf(result.get(String.valueOf(z))));
            }else{
                //if no order in day
                series.add(z,0.0);
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backG = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graph of Month");
        setResizable(false);

        backG.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout backGLayout = new javax.swing.GroupLayout(backG);
        backG.setLayout(backGLayout);
        backGLayout.setHorizontalGroup(
            backGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backGLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addContainerGap(762, Short.MAX_VALUE))
        );
        backGLayout.setVerticalGroup(
            backGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backGLayout.createSequentialGroup()
                .addContainerGap(457, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(backG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    private final XYSeries series;
    private String taitle;
    private String month;
    private String year;
    private String Rcode;
    private ReportDetailsManage reportDetailsMn;
    private OrderManage OrdMn;
    private CustomerManage CustMn;
    private msbsOrders Orders;
    private Vector<msbsOrders> allOrders;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backG;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
